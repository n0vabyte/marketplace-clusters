---
- name: Create ELK cluster
  hosts: localhost
  vars_files:
      - group_vars/linode/vars
  
  #vars:
  #  count: '{{ cluster_size - 1 }}'

  tasks:

  # Create credentials
  - name: Generating test password
    blockinfile:
      insertafter: EOF
      path: group_vars/linode/vars
      block: |
        test_password: {{ lookup('password', '/dev/null length=45 chars=ascii_letters,digits') }}

  # Create instances
  - name: Creating Elasticsearch servers
    linode.cloud.instance:
      label: '{{ elasticsearch_prefix }}{{ item | int + 1 }}-{{ uuid }}'
      api_token: '{{ token_password }}'
      type: '{{ type }}'
      region: '{{ region }}'
      image: '{{ image }}'
      root_pass: '{{ root_pass }}'
      authorized_keys: '{{ provisioner_ssh_pubkey }}'
      private_ip: true
      #stackscript_id: 00000
      #ua_prefix: 'cloud-marketplace-elk'
      tags: '{{ linode_tags }}'
      state: present
    with_sequence: count='{{ elasticsearch_cluster_size }}'

  - name: Get info about Elasticsearch servers
    linode.cloud.instance_info:
      api_token: '{{ token_password }}'
      label: '{{ instance_prefix }}{{ item }}-{{ uuid }}'
    register: elasticsearch_info
    with_sequence: count='{{ elasticsearch_cluster_size }}'

  - name: Update group_vars
    blockinfile:
      path: ./group_vars/linode/vars
      marker: "# {mark} INSTANCE VARS"
      block: |
        #jinja2: trim_blocks:False
        data:
          elasticsearch:
            {%- for count in range(elasticsearch_cluster_size) %}
            - elasticsearch{{ count + 1 }}:
              instance:
                hostname: elasticsearch{{ count + 1 }}
                ip_pub1: {{ elasticsearch_info.results[count].instance.ipv4[0] }}
                ip_priv1: {{ elasticsearch_info.results[count].instance.ipv4[1] }}
            {%- endfor %}

  - name: Add nodes to inventory
    blockinfile:
      path: ./hosts
      marker: "# {mark} ELK CLUSTER"
      block: |
        #jinja2: trim_blocks:False
        [elasticsearch]
        localhost ansible_connection=local user=root
        {%- for count in range(elasticsearch_cluster_size) %}
        {{ elasticsearch_info.results[count + 1].instance.ipv4[0] }}
        {%- endfor %}

  - name: Wait for port 22 to become open
    wait_for:
      port: 22
      host: '{{ item.instance.ipv4[0] }}'
      search_regex: OpenSSH
      delay: 10
    connection: local
    with_items: "{{ elasticsearch_info.results }}"